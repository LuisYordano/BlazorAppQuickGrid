@page "/fetchdata"
@using BlazorAppQuickGrid.Shared
@using Microsoft.AspNetCore.Components.QuickGrid
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="@filteredItems" Pagination="@pagination" ResizableColumns>
        <PropertyColumn Property="@(f => f.Date)" Sortable="true" />
        <PropertyColumn Property="@(f => f.TemperatureC)" Title="Temp (ºC)" Sortable="true" />
        <PropertyColumn Property="@(f => f.TemperatureF)" Title="Temp (ºF)" Sortable="true" />        
        <PropertyColumn Property="@(f => f.Summary)" Sortable="true">        
            <ColumnOptions>
                <div class="search-box">
                    <input type="search"
                       autofocus @bind="searchSummary" @bind:event="oninput"
                       placeholder="Summary name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
    </QuickGrid>

    <Paginator Value="@pagination" />
}

@code {
    
    private IQueryable<WeatherForecast>? forecasts;

    private PaginationState pagination = new PaginationState { ItemsPerPage = 8 };

    private string? searchSummary = string.Empty;

    IQueryable<WeatherForecast>? filteredItems => forecasts?.Where(f => f.Summary.Contains(searchSummary, StringComparison.CurrentCultureIgnoreCase));



    protected override async Task OnInitializedAsync()
    {
        forecasts = (await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast")).AsQueryable();
    }
}
